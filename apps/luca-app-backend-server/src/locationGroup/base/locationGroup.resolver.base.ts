/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LocationGroup } from "./LocationGroup";
import { LocationGroupCountArgs } from "./LocationGroupCountArgs";
import { LocationGroupFindManyArgs } from "./LocationGroupFindManyArgs";
import { LocationGroupFindUniqueArgs } from "./LocationGroupFindUniqueArgs";
import { CreateLocationGroupArgs } from "./CreateLocationGroupArgs";
import { UpdateLocationGroupArgs } from "./UpdateLocationGroupArgs";
import { DeleteLocationGroupArgs } from "./DeleteLocationGroupArgs";
import { Company } from "../../company/base/Company";
import { LocationGroupService } from "../locationGroup.service";
@graphql.Resolver(() => LocationGroup)
export class LocationGroupResolverBase {
  constructor(protected readonly service: LocationGroupService) {}

  async _locationGroupsMeta(
    @graphql.Args() args: LocationGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LocationGroup])
  async locationGroups(
    @graphql.Args() args: LocationGroupFindManyArgs
  ): Promise<LocationGroup[]> {
    return this.service.locationGroups(args);
  }

  @graphql.Query(() => LocationGroup, { nullable: true })
  async locationGroup(
    @graphql.Args() args: LocationGroupFindUniqueArgs
  ): Promise<LocationGroup | null> {
    const result = await this.service.locationGroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LocationGroup)
  async createLocationGroup(
    @graphql.Args() args: CreateLocationGroupArgs
  ): Promise<LocationGroup> {
    return await this.service.createLocationGroup({
      ...args,
      data: {
        ...args.data,

        company: args.data.company
          ? {
              connect: args.data.company,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => LocationGroup)
  async updateLocationGroup(
    @graphql.Args() args: UpdateLocationGroupArgs
  ): Promise<LocationGroup | null> {
    try {
      return await this.service.updateLocationGroup({
        ...args,
        data: {
          ...args.data,

          company: args.data.company
            ? {
                connect: args.data.company,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LocationGroup)
  async deleteLocationGroup(
    @graphql.Args() args: DeleteLocationGroupArgs
  ): Promise<LocationGroup | null> {
    try {
      return await this.service.deleteLocationGroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Company, {
    nullable: true,
    name: "company",
  })
  async getCompany(
    @graphql.Parent() parent: LocationGroup
  ): Promise<Company | null> {
    const result = await this.service.getCompany(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
